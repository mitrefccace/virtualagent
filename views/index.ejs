<!DOCTYPE html>
<html>

<head>
  <title>Virtual Agent</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>

  <div class="vid-border">
    remote
    <video id="remoteView" width="320" height="240" autoplay></video>
  </div>
  <div class="vid-border">
  self
    <video id="selfView" width="320" height="240" autoplay></video>
  </div>


  <div id="call-option-buttons">
    <div id="inner">
      <button id="answer_btn" type="button" onclick="accept_call()"> Answer </button>
      <button id="btn-start-recording" type="button" onclick="record_call()"> Record </button>
      <button id="btn-stop-recording" type="button" onclick="record_call()"> Stop Record </button>
      <button id="mute-audio" type="button" class="btn btn-gray" onclick="mute_audio()"> Mute </button>
      <button id="hide-video" type="button" class="btn btn-gray" onclick="hide_video()"> Hide </button>
      <button id="end-call" type="button" class="btn btn-danger" onclick="terminate_call()"> End </button>
    </div>
  </div>



</body>
<!-- JSSIP-->
<script type="text/javascript" src="./javascripts/jquery.min.js"></script>
<script type="text/javascript" src="./javascripts/jssip.min.js"></script>
<script type="text/javascript" src="./javascripts/myJssip.js"></script>
<script type="text/javascript" src="./javascripts/RecordRTC.js"></script>
<!-- Socket.io -->
<script src='/socket.io/socket.io.js'></script>
<script type="text/javascript">
  $(document).ready(function () {

    var socket = io();
    socket.on('connect', function (data) {
      console.log('Connected to socket.io');
      socket.emit('register-virtualagent');
    }).on('registerJssip', function (data) {
      console.log('Registering JSSIP');
      register_jssip(data.ws, data.sipUri, data.pw, data.stun);
    }).on('newCall', function (data) {
      console.log('newCall');
      accept_call();
    }).on('callEnd', function (data) {
      console.log('callEnd');
    });
  });
</script>
<script>
  // fetching DOM references
  var btnStartRecording = document.querySelector('#btn-start-recording');
  var btnStopRecording = document.querySelector('#btn-stop-recording');
  console.log("HERE btn:  " + btnStartRecording.id);

  var videoElement = document.querySelector('#remoteView');
  console.log("HERE vid:  " + videoElement.id);

  //var progressBar = document.querySelector('#progress-bar');
  //var percentage = document.querySelector('#percentage');

  var recorder;
  // reusable helpers

  // this function submits recorded blob to nodejs server
  function postFiles() {
    var blob = recorder.getBlob();
    // getting unique identifier for the file name
    var fileName = generateRandomString() + '.webm';
    var file = new File([blob], fileName, {
      type: 'video/webm'
    });
    videoElement.src = '';
    videoElement.poster = 'images/earth.gif'; <!-- was ajax-loader.gif; now earth.gif -->
    xhr('/uploadFile', file, function (responseText) {
      var fileURL = JSON.parse(responseText).fileURL;
      console.info('fileURL', fileURL);
      videoElement.src = fileURL;
      videoElement.play();
      videoElement.muted = false;
      videoElement.controls = true;
      document.querySelector('#footer-h2').innerHTML = '<a href="' + videoElement.src + '">' + videoElement.src +
        '</a>';
    });

    if (mediaStream) mediaStream.stop();
  }

  // XHR2/FormData
  function xhr(url, data, callback) {
    var request = new XMLHttpRequest();
    request.onreadystatechange = function () {
      if (request.readyState == 4 && request.status == 200) {
        callback(request.responseText);
      }
    };

    //Remove?
    request.upload.onprogress = function (event) {
      //progressBar.max = event.total;
      //progressBar.value = event.loaded;
      //progressBar.innerHTML = 'Upload Progress ' + Math.round(event.loaded / event.total * 100) + "%";
    };
    //Remove?
    request.upload.onload = function () {
      //percentage.style.display = 'none';
      //progressBar.style.display = 'none';
    };
    request.open('POST', url);
    console.log("URL is: " + url);
    var formData = new FormData();
    formData.append('file', data);
    request.send(formData);
  }
  // generating random string
  function generateRandomString() {
    if (window.crypto) {
      var a = window.crypto.getRandomValues(new Uint32Array(3)),
        token = '';
      for (var i = 0, l = a.length; i < l; i++) token += a[i].toString(36);
      return token;
    } else {
      return (Math.random() * new Date().getTime()).toString(36).replace(/\./g, '');
    }
  }
  var mediaStream = null;
  // reusable getUserMedia
  function captureUserMedia(success_callback) {
    var session = {
      audio: true,
      video: true
    };

    navigator.getUserMedia(session, success_callback, function (error) {
      alert('Unable to capture your camera. Please check console logs.');
      console.error(error);
    });
  }
  // UI events handling
  btnStartRecording.onclick = function () { //LEFT OFF HERE left off here
    btnStartRecording.disabled = true;

    captureUserMedia(function (stream) {
      mediaStream = stream;

      videoElement.src = window.URL.createObjectURL(stream); //HERE
      videoElement.play();
      videoElement.muted = true;
      videoElement.controls = false;

      recorder = RecordRTC(remoteStream.srcObject, { //HERE
        type: 'video'
      });

      recorder.startRecording();
      // enable stop-recording button
      btnStopRecording.disabled = false;
    });
  };
  btnStopRecording.onclick = function () {
    btnStartRecording.disabled = false;
    btnStopRecording.disabled = true;

    recorder.stopRecording(postFiles);
  };
  window.onbeforeunload = function () {
    //startRecording.disabled = false;
  };
</script>

</html>